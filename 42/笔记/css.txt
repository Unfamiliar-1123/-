❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️
外部引用：link
内部引用：在head中加style
内联：（不建议使用）：在元素后加style
1.选择器：
        通用选择器：*{}
        id选择器   #{}
        类选择器   .{}
        标签选择器  标签名{}
        后代选择器  #box p
        子代选择器  #box>p
        兄弟选择器  #box~p
        相邻选择器  #box+p
        属性选择器  标签名【id】选中标签名中含有id属性的所有元素
                   标签名【name="**"】选中标签名中所有name为**的元素
        伪类选择器   **：hover  鼠标滑过时的样式
                    **：last-child   **后代中每一代的所有元素中的最后一个
                    **>:last-child   **亲儿子中的最后一个
                    ** ##：first-child   **下面的每一代中的##中的第一个
                    **：nth-child(n)     **下面的第n个孩子
                    ** ##：nth-child(n)   **每一代孩子中的##
                    **：nth-of-type(n)    **每一代中每一种标签的第n个
                    ** ##：nth-of-type(n) **每一代中##标签的第n个
                    **>##::after          在该标签后显示
                    **>##:hover:before   鼠标滑过时在该标签前显示
2.优先级：
            权重值不同：权重值高的胜出 
            权重值计算 
            1、!important，加在样式属性值后，权重值为 10000
            2、内联样式，如：style=””，权重值为1000
            3、ID选择器，如：#content，权重值为100
            4、类，伪类和属性选择器，如： content、:hover 权重值为10
            5、标签选择器和伪元素选择器，如：div、p、:before 权重值为1
            6、通用选择器（*）、子选择器（>）、相邻选择器（+）、同胞选择器（~）、权重值为0 
            [注释]不允许进位
3.继承：
        优先级由低-高 
            1、用户代理样式表中的声明(例如，浏览器的默认样式，在没有设置其他样式时使用)。
            2、用户样式表中的常规声明(由用户设置的自定义样式)。
            3、作者样式表中的常规声明(这些是我们web开发人员设置的样式)。
            4、作者样式表中的!important声明
            5、用户样式表中的!important 声明
            有些会继承有些不会（color，font-family）
            不是所有的属性都能够被继承
        继承父元素的样式   inherit
        使用默认样式       initial
        使用样式继承规则的默认值  unset（这个样式本来就会被继承的话【inherit】，这个样式本来就不会被继承【initial】）
4.常用样式：
          width   宽度
          height  高度
          border  边框（颜色  像素大小  样式）
          border-radius   边框圆角（单位：像素）
          font-size   字体大小
          font-style  字体样式
          font-weight  字体粗细
          font-family   字体（宋体、楷书...）
          background/background-colour  背景颜色
          color:颜色/ color:rgb(red,green,blue)/ color( %, %, %) 0也要加%  / color:rgba(red,green,blue,透明度)  /color:16进制  字体颜色
          background-image:url(地址);    背景图片
          background-repeat            背景图片重复情况（no-repeat 不重复）
          overflow-hidden       溢出隐藏
          overflow: scroll      溢出部分滚动窗口形式显示
          background-attachment:local  正常样式   scroll  滚动窗口   fixed  起始位置是相对与浏览器窗口（可是窗口）左上角而非父元素
          background-origin: content-box  padding-box  border-box   规定背景图片的绘制区域
          background-clip: content-box  padding-box  裁切背景的显示区域（从设置值以外的背景全都不要）
          background-size   设置背景图片大小
          text-align       字体位置（center  位于中间）
          line-height       字体竖直位置（与height值相同时，竖直方向位于中间）
          text-decoration  文本修饰（可用于取消下划线  none）
          list-style       列表样式（none 取消列表前的点点）
          opacity  透明度

5.行级块元素 display: block;
  块级行元素 display: inline;（块级元素可处在一行上，具有行级元素的性质）
6.盒模型：
         content  内容
         border   边框
         padding  内边距
         margin   外边距

         padding会把元素中的内容向内挤，盒子所占的空间会增大
         margin会将其它元素推离当前元素

         怪异盒模型（IE）  box-sizing:border-box   content-box

         当外边距相碰时，取较大值
7.定位：
       position: static  静止定位：没有变化（默认值）【将元素放在他在文档流中的正常位置】top left 的值没用 
                 relative  相对定位：可以改变top left 的值，占据在正常的文档流中
                 absolute  绝对定位：脱离文档流，被定位的元素在文档中不占据任何空间，在另一个层里呈现，类似于ps中的图层的效果。相对于最近已定位父元素进行定位的 
                 sticky    计算位置是相对于浏览器窗口  sticky：（relative  +  fixed ）

                 relative:
                1、位置相对于自身原始位置计算
                2、不脱离文档流（原来占的位置不被释放）
                3、可能会覆盖其它元素

                absolute
                1、脱离文档流（原来占的位位置会被释放）
                2、位置计算是相对于最近已定位父元素

                fixed：
                1、计算位置是相对于浏览器窗口
                2、脱离文档流（原来占的位位置会被释放）
8.浮动
       display: inline-block;  块级元素能在同一行显示  不会脱离文本流，没有父元素塌陷的情况
       float                   同上的功能，但是脱离文档流，有父元素塌陷的情况
       
       ❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️
       父元素塌陷：
                1、给父元素设置一个高度
                2、给父元素设置overflow: hidden;
                3、在子元素的最后添加一个空元素，给这个空元素设置clear: both;
                4、用伪元素选择器给父元素后加一个空伪元素
        ❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️❤️